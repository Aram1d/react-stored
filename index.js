import{useRef,useState,useMemo,useCallback,useEffect}from"react";let storeStorage=window.localStorage,storeKeyPrefix="",storeSerialize=JSON.stringify,storeDeserialize=JSON.parse;const storeSchemas=[];export const config=({storage:a,keyPrefix:b,serialize:c,deserialize:d,schemas:e})=>{a&&(storeStorage=a),b&&(storeKeyPrefix=b),c&&(storeSerialize=c),d&&(storeDeserialize=d),e&&storeSchemas.push(...e)};export const addSchema=(a,b,c)=>{storeSchemas.push({key:a,init:b,assert:c})};const storeUpdaters={},addUpdater=(a,b)=>{a in storeUpdaters?storeUpdaters[a].push(b):storeUpdaters[a]=[b]},removeUpdater=(a,b)=>{if(a in storeUpdaters){const c=storeUpdaters[a].indexOf(b);-1!==c&&storeUpdaters[a].splice(c,1)}},callUpdaters=(a,b)=>{if(a in storeUpdaters)for(const c of storeUpdaters[a])c(b)};export const useStore=(a,b,c)=>{const d=useRef(),e=useMemo(()=>storeSchemas.find(b=>"string"==typeof b.key?b.key===a:b.key.test(a)),[a]);useMemo(()=>{const f=[b,e&&e.init,null].find(a=>a!==void 0),g=c||e&&e.assert;try{const b=storeStorage.getItem(`${storeKeyPrefix}${a}`);if(null===b)throw new Error;const c=storeDeserialize(b);if(g&&!g(c))throw new Error;d.current=c}catch(b){storeStorage.setItem(`${storeKeyPrefix}${a}`,storeSerialize(f)),d.current=f}},[a,b,c,e]);const f=useState({})[1];useEffect(()=>{const b=a=>{d.current=a,f({})};return addUpdater(a,b),()=>{removeUpdater(a,b)}},[a,f]);const g=useCallback(b=>{"function"==typeof b&&(b=b(d.current)),storeStorage.setItem(`${storeKeyPrefix}${a}`,storeSerialize(b)),callUpdaters(a,b)},[a]);return[d.current,g]};export const readStore=a=>{const b=storeStorage.getItem(`${storeKeyPrefix}${a}`);return storeDeserialize(b)};
